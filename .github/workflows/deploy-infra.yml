name: Deploy Nginx Load Balancer
on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.7"

      - name: Terraform Init
        run: terraform init
        working-directory: project/modules/loadbalancer

      - name: Get Subnet ID
        id: get_subnet
        run: |
          cd project/modules/vpc
          echo "sn_pub01_id=$(terraform output -raw sn_pub01_id)" >> $GITHUB_OUTPUT
        shell: bash
      
      - name: Show Subnet ID
        run: |
          echo "Subnet ID: ${{ steps.get_subnet.outputs.sn_pub01_id }}"

      - name: Terraform Plan
        run: terraform plan -no-color -out=tfplan
        working-directory: project/modules/loadbalancer

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: project/modules/loadbalancer

      - name: Generate Nginx Config
        id: nginx_config
        run: |
          cd project/modules/compute
          echo "frontend_private_ips=$(terraform output -json frontend_private_ips)" >> $GITHUB_OUTPUT
          echo "backend_private_ips=$(terraform output -json backend_private_ips)" >> $GITHUB_OUTPUT

          - name: Deploy Nginx Config
          run: |
            cat > nginx.conf <<EOF
            upstream frontend {
                ${{
                  join(
                    '\n        server ',
                    fromJson(steps.nginx_config.outputs.frontend_ips)
                  )
                }}
            }
            upstream backend {
                ${{
                  join(
                    '\n        server ',
                    fromJson(steps.nginx_config.outputs.backend_ips)
                  )
                }}
            }
            server {
                listen 80;
                location / {
                    proxy_pass http://frontend;
                }
                location /api/ {
                    proxy_pass http://backend;
                }
            }
            EOF
        
            aws ssm send-command \
              --instance-ids $(cd project/modules/loadbalancer && terraform output -raw nginx_instance_id) \
              --document-name "AWS-RunShellScript" \
              --parameters 'commands=[
                "echo '$nginx_conf' > /tmp/nginx.conf",
                "sudo mv /tmp/nginx.conf /etc/nginx/nginx.conf",
                "sudo systemctl restart nginx"
              ]' \
              --cli-binary-format raw-in-base64-out
          env:
            nginx_conf: $(cat nginx.conf)