name: Deploy Nginx Load Balancer
on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # 1. Checkout e configuração inicial
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
        shell: bash

      # 2. Aplicar módulo VPC primeiro
      - name: Initialize and Apply VPC Module
        run: |
          cd project/modules/vpc
          terraform init
          terraform apply -auto-approve

      # 3. Aplicar módulo Load Balancer
      - name: Initialize and Apply Load Balancer
        run: |
          cd project/modules/loadbalancer
          terraform init
          terraform apply -auto-approve

      # 4. Configurar Nginx dinamicamente
      - name: Configure Nginx
        run: |
          # Obter IPs das instâncias
          cd project/modules/compute
          FRONTEND_IPS=$(terraform output -json frontend_private_ips | jq -r '.[]')
          BACKEND_IPS=$(terraform output -json backend_private_ips | jq -r '.[]')
          NGINX_INSTANCE_ID=$(cd ../loadbalancer && terraform output -raw nginx_instance_id)

          # Gerar arquivo de configuração
          cat > nginx.conf <<EOF
          upstream frontend {
              ${echo "$FRONTEND_IPS" | sed 's/^/server /; s/$/;/'}
          }
          upstream backend {
              ${echo "$BACKEND_IPS" | sed 's/^/server /; s/$/;/'}
          }
          server {
              listen 80;
              location / {
                  proxy_pass http://frontend;
              }
              location /api/ {
                  proxy_pass http://backend;
              }
          }
          EOF

          # Enviar configuração para a instância Nginx
          aws ssm send-command \
            --instance-ids "$NGINX_INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "sudo mv /tmp/nginx.conf /etc/nginx/nginx.conf",
              "sudo systemctl restart nginx"
            ]' \
            --cli-binary-format raw-in-base64-out